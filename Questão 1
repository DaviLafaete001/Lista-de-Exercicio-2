#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

typedef struct {
    int elem;
    int count;
} Elemento;

int L1[MAX_SIZE], L2[MAX_SIZE], L3[MAX_SIZE];
int n1 = 0, n2 = 0, n3 = 0;

// Função para verificar se a lista está ordenada (crescente ou decrescente)
int verificarOrdenacao(int L[], int n) {
    if (n <= 1) return 1; // Lista de tamanho 1 ou vazia é considerada ordenada

    int crescente = 1, decrescente = 1;
    for (int i = 0; i < n - 1; i++) {
        if (L[i] < L[i + 1]) decrescente = 0;
        if (L[i] > L[i + 1]) crescente = 0;
    }

    if (crescente) return 1; // Ordenada crescente
    if (decrescente) return -1; // Ordenada decrescente
    return 0; // Não está ordenada
}

// Função para copiar L1 em L2
void copiarLista(int L1[], int *n1, int L2[], int *n2) {
    for (int i = 0; i < *n1; i++) {
        L2[i] = L1[i];
    }
    *n2 = *n1;
}

// Função para copiar L1 em L2, eliminando elementos repetidos
void copiarSemRepetidos(int L1[], int *n1, int L2[], int *n2) {
    int i, j = 0;
    for (i = 0; i < *n1; i++) {
        int existe = 0;
        for (int k = 0; k < j; k++) {
            if (L1[i] == L2[k]) {
                existe = 1;
                break;
            }
        }
        if (!existe) {
            L2[j++] = L1[i];
        }
    }
    *n2 = j;
}

// Função para inverter L1 e armazenar em L2
void inverterLista(int L1[], int *n1, int L2[], int *n2) {
    for (int i = 0; i < *n1; i++) {
        L2[i] = L1[*n1 - 1 - i];
    }
    *n2 = *n1;
}

// Função para inverter L1 e armazenar na própria L1
void inverterEmL1(int L1[], int *n1) {
    int temp;
    for (int i = 0; i < *n1 / 2; i++) {
        temp = L1[i];
        L1[i] = L1[*n1 - 1 - i];
        L1[*n1 - 1 - i] = temp;
    }
}

// Função para intercalar L1 com L2 e armazenar em L3
void intercalarListas(int L1[], int *n1, int L2[], int *n2, int L3[], int *n3) {
    int i = 0, j = 0, k = 0;
    while (i < *n1 && j < *n2) {
        if (L1[i] <= L2[j]) {
            L3[k++] = L1[i++];
        } else {
            L3[k++] = L2[j++];
        }
    }

    while (i < *n1) {
        L3[k++] = L1[i++];
    }

    while (j < *n2) {
        L3[k++] = L2[j++];
    }

    *n3 = k;
}

// Função para gerar lista L2 com elementos e contagem de ocorrências em L1
void gerarContagem(int L1[], int *n1, Elemento L2[], int *n2) {
    int j = 0;
    for (int i = 0; i < *n1; i++) {
        int existe = 0;
        for (int k = 0; k < j; k++) {
            if (L2[k].elem == L1[i]) {
                L2[k].count++;
                existe = 1;
                break;
            }
        }
        if (!existe) {
            L2[j].elem = L1[i];
            L2[j].count = 1;
            j++;
        }
    }
    *n2 = j;
}

// Função para eliminar todas as ocorrências de um elemento em L1
void eliminarElemento(int L1[], int *n1, int elemento) {
    int j = 0;
    for (int i = 0; i < *n1; i++) {
        if (L1[i] != elemento) {
            L1[j++] = L1[i];
        }
    }
    *n1 = j;
}

// Função para encontrar o elemento com maior e menor número de ocorrências
void maiorMenorOcorrencias(int L1[], int *n1) {
    Elemento L2[MAX_SIZE];
    int n2 = 0;
    gerarContagem(L1, n1, L2, &n2);

    int maior = L2[0].count, menor = L2[0].count;
    int maiorElem = L2[0].elem, menorElem = L2[0].elem;

    for (int i = 1; i < n2; i++) {
        if (L2[i].count > maior) {
            maior = L2[i].count;
            maiorElem = L2[i].elem;
        }
        if (L2[i].count < menor) {
            menor = L2[i].count;
            menorElem = L2[i].elem;
        }
    }

    printf("Maior ocorrência: %d, Elemento: %d\n", maior, maiorElem);
    printf("Menor ocorrência: %d, Elemento: %d\n", menor, menorElem);
}

int main() {
    L1[0] = 1; L1[1] = 2; L1[2] = 3; L1[3] = 3; L1[4] = 4;
    n1 = 5;

    printf("Verificação de ordenação: %d\n", verificarOrdenacao(L1, n1));

    copiarLista(L1, &n1, L2, &n2);
    printf("Cópia de L1 em L2:\n");
    for (int i = 0; i < n2; i++) {
        printf("%d ", L2[i]);
    }
    printf("\n");

    copiarSemRepetidos(L1, &n1, L2, &n2);
    printf("Cópia de L1 em L2, sem repetidos:\n");
    for (int i = 0; i < n2; i++) {
        printf("%d ", L2[i]);
    }
    printf("\n");

    inverterLista(L1, &n1, L2, &n2);
    printf("Inversão de L1 em L2:\n");
    for (int i = 0; i < n2; i++) {
        printf("%d ", L2[i]);
    }
    printf("\n");

    inverterEmL1(L1, &n1);
    printf("Inversão de L1:\n");
    for (int i = 0; i < n1; i++) {
        printf("%d ", L1[i]);
    }
    printf("\n");

    intercalarListas(L1, &n1, L2, &n2, L3, &n3);
    printf("Intercalagem de L1 e L2 em L3:\n");
    for (int i = 0; i < n3; i++) {
        printf("%d ", L3[i]);
    }
    printf("\n");

    Elemento L2_contagem[MAX_SIZE];
    int n2_contagem = 0;
    gerarContagem(L1, &n1, L2_contagem, &n2_contagem);
    printf("Contagem de elementos em L1:\n");
    for (int i = 0; i < n2_contagem; i++) {
        printf("Elemento: %d, Contagem: %d\n", L2_contagem[i].elem, L2_contagem[i].count);
    }

    int elemento = 3;
    eliminarElemento(L1, &n1, elemento);
    printf("L1 após eliminar o elemento %d:\n", elemento);
    for (int i = 0; i < n1; i++) {
        printf("%d ", L1[i]);
    }
    printf("\n");

    maiorMenorOcorrencias(L1, &n1);

    return 0;
}

